[includeIf "gitdir:~/ggg/"]
    path = ~/ggg/.gitconfig
[user]
    name = Brandon Lee
    email = 
[core]
    excludesfile = ~/.gitignore
[init]
    defaultBranch = main
[pull]
    ff = only
[push]
    default = simple
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = true
    pager = true
    trustExitCode = true
[merge]
    tool = vim-mergetool
    #conflictStyle = diff3
    conflictStyle = zdiff3
[mergetool "vim-mergetool"]
    cmd = gvim -f -c "MergetoolStart" \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
    trustExitCode = true

[alias]
    # http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
    # Output all your aliases:
    alias = "!git config -l | grep alias | cut -c 7-"
    # Basic Shortcuts
    cp = cherry-pick
    co = checkout
    br = branch
    d = diff
    dw = diff --word-diff
    ds = diff --staged
    st = status
    sst = status -sb
    # updates/pull
    up = "!git remote update -p; git merge --ff-only @{u}"
    pall = pull --recurse-submodules
    # submodules
    # short, include the branch details
    sub = submodule
    subuprr = submodule update --recursive --remote
    # Provide a one line git log including date and committer name.
    ls = log --pretty=format:"%C(yellow)%h\\ %C(blue)%ad%C(red)%d\\ %C(reset)%s%C(green)\\ [%cn]" --decorate --date=short
    ll = log --pretty=format:"%C(yellow)%h\\ %C(blue)%ad%C(red)%d\\ %C(reset)%s%C(green)\\ [%cn]" --decorate --numstat --date=short
    le = log --oneline --decorate
    # graph
    graph  = log --graph --decorate --pretty=oneline --abbrev-commit
    # see all the commits related to a file, with the diff of the changes
    filelog = log -u
    # Show content (full diff) of a commit given a revision:
    ll-rev   = "!f() { git ll "$1"^.."$1"; }; f"
    diff-rev = "!f() { git diff "$1"^.."$1"; }; f"
    # Find a file path in codebase:
    find = "!git ls-files | grep -i"
    # Search/grep your entire codebase for a string:
    grep = grep -Ii
    # Grep from root folder
    grep-root = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
    # Show the last tag:
    last-tag = describe --tags --abbrev=0
    # fetch all revisions on all branches
    fetchall = fetch -v --all
    # Amend the staged changes to your last commit
    amend = commit --amend -C HEAD
    # Sometimes, amending your last commit isn't enough and you'll need to undo it instead. This alias
    # will step back one commit and leave the changes from that commit staged. Now you can make additional
    # changes, or recommit with a new message.
    undo = reset --soft HEAD^
    # Quickly rename branches prepending 'done-' to their names:
    ren-done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
    # Merge stuff:
    ours   = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"
